{"ast":null,"code":"import _classCallCheck from \"D:\\\\Web Dev\\\\React\\\\LightsOut\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Web Dev\\\\React\\\\LightsOut\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Web Dev\\\\React\\\\LightsOut\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Web Dev\\\\React\\\\LightsOut\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Web Dev\\\\React\\\\LightsOut\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Web Dev\\\\React\\\\LightsOut\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Web Dev\\\\React\\\\LightsOut\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          row.push(Math.random() < this.props.chanceLightsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n      var i = parseInt(coord.split(\"-\")[0]);\n      var j = parseInt(coord.split(\"-\")[1]);\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(i, j);\n      flipCell(i, j - 1);\n      flipCell(i, j + 1);\n      flipCell(i - 1, j);\n      flipCell(i + 1, j); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      var flag;\n\n      for (var _i = 0; _i < nrows; _i++) {\n        for (var _j = 0; _j < ncols; _j++) {\n          if (board[_i][_j] === true) {\n            flag = board[_i][_j];\n          }\n        }\n      }\n\n      var hasWon = flag;\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      var tblboard = [];\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        var row = [];\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          var coord = i + \"-\" + j;\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: coord,\n            keys: coord,\n            isLit: this.state.board[i][j],\n            flipCellsAroundMe: this.flipCellsAround,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 18\n            }\n          }));\n        }\n\n        tblboard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 21\n          }\n        }, row));\n      }\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }\n      }, tblboard)); // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["D:/Web Dev/React/LightsOut/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAround","bind","i","nrows","row","j","ncols","push","Math","random","chanceLightsOn","coord","parseInt","split","flipCell","y","x","flag","setState","tblboard","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps ={\n    nrows:5,\n    ncols:5,\n    chanceLightsOn:0.25\n  };\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon:false,\n      board:this.createBoard()\n    }\n    this.flipCellsAround=this.flipCellsAround.bind(this)\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < this.props.nrows; i++) \n    {\n      let row =[];\n      for(let j=0;j<this.props.ncols;j++)\n      {\n        row.push(Math.random()< this.props.chanceLightsOn)\n      }  \n      board.push(row)\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let i=parseInt(coord.split(\"-\")[0])\n    let j=parseInt(coord.split(\"-\")[1])\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(i,j)\n    flipCell(i,j-1)\n    flipCell(i,j+1)\n    flipCell(i-1,j)\n    flipCell(i+1,j)\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let flag;\n    for (let i = 0; i < nrows; i++) {\n      for(let j=0; j < ncols; j++)\n      {\n        if(board[i][j] === true)\n        {\n          flag=board[i][j]\n        }\n      }   \n    }\n    let hasWon=flag\n    this.setState({board:board, hasWon:hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    let tblboard=[];\n    for (let i = 0; i < this.props.nrows; i++) \n    {\n      let row=[]\n      for(let j=0; j< this.props.ncols;j++)\n      {\n        let coord=i+\"-\"+j;\n        row.push(<Cell \n                  key={coord} \n                  keys={coord}\n                  isLit={this.state.board[i][j]}\n                  flipCellsAroundMe={this.flipCellsAround}/>)\n      }\n      tblboard.push(<tr key={i}>{row}</tr>);\n      \n    }\n    return(\n        <table className=\"Board\">\n          <tbody>{tblboard}</tbody>\n        </table>\n    )\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}