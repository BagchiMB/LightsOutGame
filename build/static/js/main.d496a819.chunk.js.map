{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","keys","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","i","nrows","row","j","ncols","push","Math","random","chanceLightsOn","coord","flag","_this$props","parseInt","split","flipCell","y","x","setState","tblboard","src_Cell_0","key","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QA0BeA,qBApBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAcP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAFFA,2EAKPU,GAEVP,KAAKJ,MAAMY,kBAAkBR,KAAKJ,MAAMa,uCAIxC,IAAIC,EAAU,QAAUV,KAAKJ,MAAMe,MAAQ,YAAc,IAEzD,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAASM,QAAShB,KAAKI,qBAf3Ba,cCEbC,qBAOJ,SAAAA,EAAYtB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACjBrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KAEDuB,MAAQ,CACXC,QAAO,EACPC,MAAMxB,EAAKyB,eAEbzB,EAAK0B,gBAAgB1B,EAAK0B,gBAAgBlB,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAPJA,6EAejB,IAFA,IAAIwB,EAAQ,GAEHG,EAAI,EAAGA,EAAIxB,KAAKJ,MAAM6B,MAAOD,IACtC,CAEE,IADA,IAAIE,EAAK,GACDC,EAAE,EAAEA,EAAE3B,KAAKJ,MAAMgC,MAAMD,IAE7BD,EAAIG,KAAKC,KAAKC,SAAU/B,KAAKJ,MAAMoC,gBAErCX,EAAMQ,KAAKH,GAEb,OAAOL,0CAKOY,GAAO,IAqBjBC,EArBiBC,EACAnC,KAAKJ,MAArBgC,EADgBO,EAChBP,MAAOH,EADSU,EACTV,MACRJ,EAAQrB,KAAKmB,MAAME,MACnBG,EAAEY,SAASH,EAAMI,MAAM,KAAK,IAC5BV,EAAES,SAASH,EAAMI,MAAM,KAAK,IAEhC,SAASC,EAASC,EAAGC,GAGfA,GAAK,GAAKA,EAAIZ,GAASW,GAAK,GAAKA,EAAId,IACvCJ,EAAMkB,GAAGC,IAAMnB,EAAMkB,GAAGC,IAG5BF,EAASd,EAAEG,GACXW,EAASd,EAAEG,EAAE,GACbW,EAASd,EAAEG,EAAE,GACbW,EAASd,EAAE,EAAEG,GACbW,EAASd,EAAE,EAAEG,GAKb,IAAK,IAAIH,EAAI,EAAGA,EAAIC,EAAOD,IACzB,IAAI,IAAIG,EAAE,EAAGA,EAAIC,EAAOD,KAEH,IAAhBN,EAAMG,GAAGG,KAEVO,EAAKb,EAAMG,GAAGG,IAIpB,IAAIP,GAAQc,EACZlC,KAAKyC,SAAS,CAACpB,MAAMA,EAAOD,OAAOA,qCAOnC,GAAGpB,KAAKmB,MAAMC,OAEZ,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,OACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,UAQR,IADA,IAAI2B,EAAS,GACJlB,EAAI,EAAGA,EAAIxB,KAAKJ,MAAM6B,MAAOD,IACtC,CAEE,IADA,IAAIE,EAAI,GACAC,EAAE,EAAGA,EAAG3B,KAAKJ,MAAMgC,MAAMD,IACjC,CACE,IAAIM,EAAMT,EAAE,IAAIG,EAChBD,EAAIG,KAAKjB,EAAAC,EAAAC,cAAC6B,EAAD,CACCC,IAAKX,EACLxB,KAAMwB,EACNtB,MAAOX,KAAKmB,MAAME,MAAMG,GAAGG,GAC3BnB,kBAAmBR,KAAKuB,mBAEpCmB,EAASb,KAAKjB,EAAAC,EAAAC,cAAA,MAAI8B,IAAKpB,GAAIE,IAG7B,OACId,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,QAEFH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACjBH,EAAAC,EAAAC,cAAA,aAAQ4B,YA/GEzB,cAAdC,EACG2B,aAAc,CACnBpB,MAAM,EACNG,MAAM,EACNI,eAAe,KAoHJd,QC/GA4B,0LARX,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiC,EAAD,cAJU9B,cCME+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d496a819.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n\n    this.props.flipCellsAroundMe(this.props.keys);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n\n\nclass Board extends Component {\n  static defaultProps ={\n    nrows:5,\n    ncols:5,\n    chanceLightsOn:0.25\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasWon:false,\n      board:this.createBoard()\n    }\n    this.flipCellsAround=this.flipCellsAround.bind(this)\n  }\n\n\n\n  createBoard() {\n    let board = [];\n\n    for (let i = 0; i < this.props.nrows; i++) \n    {\n      let row =[];\n      for(let j=0;j<this.props.ncols;j++)\n      {\n        row.push(Math.random()< this.props.chanceLightsOn)\n      }  \n      board.push(row)\n    }\n    return board\n  }\n\n\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let i=parseInt(coord.split(\"-\")[0])\n    let j=parseInt(coord.split(\"-\")[1])\n\n    function flipCell(y, x) {\n\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(i,j)\n    flipCell(i,j-1)\n    flipCell(i,j+1)\n    flipCell(i-1,j)\n    flipCell(i+1,j)\n\n\n\n    let flag;\n    for (let i = 0; i < nrows; i++) {\n      for(let j=0; j < ncols; j++)\n      {\n        if(board[i][j] === true)\n        {\n          flag=board[i][j]\n        }\n      }   \n    }\n    let hasWon=!flag\n    this.setState({board:board, hasWon:hasWon});\n  }\n\n\n\n\n  render() {\n    if(this.state.hasWon)\n    {\n      return(\n        <div className=\"Board-title\">\n          <div className=\"Winner\">\n            <span className=\"neon-orange\">YOU</span>\n            <span className=\"neon-blue\">WIN!</span>\n          </div>\n        </div> \n      )\n    }\n\n\n    let tblboard=[];\n    for (let i = 0; i < this.props.nrows; i++) \n    {\n      let row=[]\n      for(let j=0; j< this.props.ncols;j++)\n      {\n        let coord=i+\"-\"+j;\n        row.push(<Cell \n                  key={coord} \n                  keys={coord}\n                  isLit={this.state.board[i][j]}\n                  flipCellsAroundMe={this.flipCellsAround}/>)\n      }\n      tblboard.push(<tr key={i}>{row}</tr>);\n      \n    }\n    return(\n        <div>\n          <div className=\"Board-title\">\n            <div className=\"neon-orange\">Lights</div>\n            <div className=\"neon-blue\">Out</div>\n          </div> \n          <table className=\"Board\">\n          <tbody>{tblboard}</tbody>\n        </table>\n        </div>\n        \n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}